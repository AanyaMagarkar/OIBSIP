import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class ATMInterface {
    private static final String CORRECT_USER_ID = "1234567890";
    private static final String CORRECT_PIN = "1234";

    private static double accountBalance = 1000.00;
    private static List<String> transactionHistory = new ArrayList<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        boolean loggedIn = false;

        // User login
        System.out.print("Enter User ID: ");
        String userId = scanner.nextLine();

        System.out.print("Enter Password: ");
        String password = scanner.nextLine();

        if (authenticateUser(userId, password)) {
            loggedIn = true;
            System.out.println("Login Successful!\n");
        } else {
            System.out.println("Invalid User ID or Password. Exiting...");
            return;
        }

        // ATM menu
        while (loggedIn) {
            System.out.println("--- ATM Menu ---");
            System.out.println("1. Transaction History");
            System.out.println("2. Deposit");
            System.out.println("3. Withdraw");
            System.out.println("4. Transfer");
            System.out.println("5. Quit");
            System.out.print("Enter your choice: ");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline character

            switch (choice) {
                case 1:
                    showTransactionHistory();
                    break;
                case 2:
                    System.out.print("Enter the amount to deposit: ");
                    double depositAmount = scanner.nextDouble();
                    scanner.nextLine();
                    deposit(depositAmount);
                    break;
                case 3:
                    System.out.print("Enter the amount to withdraw: ");
                    double withdrawAmount = scanner.nextDouble();
                    scanner.nextLine(); 
                    withdraw(withdrawAmount);
                    break;
                case 4:
                    System.out.print("Enter the amount to transfer: ");
                    double transferAmount = scanner.nextDouble();
                    scanner.nextLine(); 
                    System.out.print("Enter the recipient's account number: ");
                    String recipientAccount = scanner.nextLine();
                    transfer(transferAmount, recipientAccount);
                    break;
                case 5:
                    loggedIn = false;
                    System.out.println("Thank you for using the ATM. Goodbye!");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
                    break;
            }
        }

        scanner.close();
    }

    private static boolean authenticateUser(String userId, String pin) {
        return userId.equals(CORRECT_USER_ID) && pin.equals(CORRECT_PIN);
    }

    private static void showTransactionHistory() {
        System.out.println("\n=== Transaction History ===");
        if (transactionHistory.isEmpty()) {
            System.out.println("No transaction history available.");
        } else {
            for (String transaction : transactionHistory) {
                System.out.println(transaction);
            }
        }
        System.out.println();
    }

    private static void deposit(double amount) {
        accountBalance += amount;
        String transaction = "Deposit: +Rs." + amount + " - New balance: Rs." + accountBalance;
        transactionHistory.add(transaction);
        System.out.println(transaction + "\n");
    }

    private static void withdraw(double amount) {
        if (amount <= accountBalance) {
            accountBalance -= amount;
            String transaction = "Withdrawal: -Rs." + amount + " - New balance: Rs." + accountBalance;
            transactionHistory.add(transaction);
            System.out.println(transaction + "\n");
        } else {
            System.out.println("Insufficient funds. Withdrawal failed.\n");
        }
    }

    private static void transfer(double amount, String recipientAccount) {
        if (amount <= accountBalance) {
            accountBalance -= amount;
            String transaction = "Transfer: -Rs." + amount + " to account " + recipientAccount + " - New balance: Rs." + accountBalance;
            transactionHistory.add(transaction);
            System.out.println(transaction + "\n");
        } else {
            System.out.println("Insufficient funds. Transfer failed.\n");
        }
    }
}
